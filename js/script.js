// Constantes e vari√°veis globais
const precoIngresso = 30;  // Pre√ßo fixo do ingresso
let quantidade = 1;  // Quantidade inicial de ingressos

// Usu√°rio administrador simulado
const adminUser = { email: "admin@cinema.com", senha: "admin123", isAdmin: true, nome: "Administrador" };

// Filmes iniciais
const filmesIniciais = [
  {
    id: 1,
    nome: "Arca de No√©",
    descricao: "Uma aventura animada.",
    preco: 30,
    capa: "../img/filme1.jpg"
  },
  {
    id: 2,
    nome: "Dr√°cula: A Hist√≥ria Nunca Contada",
    descricao: "Origem sombria do vampiro.",
    preco: 30,
    capa: "../img/filme2.jpg"
  },
  {
    id: 3,
    nome: "Megamente",
    descricao: "O vil√£o mais divertido.",
    preco: 30,
    capa: "../img/filme3.jpg"
  }
];

// Fun√ß√£o para inicializar filmes no localStorage
function inicializarFilmes() {
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");
  if (filmes.length === 0) {
    localStorage.setItem("filmes", JSON.stringify(filmesIniciais));
  }
}

// Fun√ß√£o para carregar filmes na p√°gina inicial
function carregarFilmesHome() {
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");
  const listaFilmesDiv = document.getElementById("listaFilmesHome");

  if (listaFilmesDiv) {
    listaFilmesDiv.innerHTML = ""; // Limpa a lista

    if (filmes.length === 0) {
      listaFilmesDiv.innerHTML = "<p>Nenhum filme dispon√≠vel no momento.</p>";
      return;
    }

    // Cria cards de filmes
    filmes.forEach(filme => {
      const filmeDiv = document.createElement("div");
      filmeDiv.className = "filme";
      filmeDiv.onclick = () => selecionarFilme(filme.nome);

      // Imagem do filme
      const img = document.createElement("img");
      img.src = filme.capa;
      img.alt = filme.nome;
      filmeDiv.appendChild(img);

      // T√≠tulo do filme
      const titulo = document.createElement("h3");
      titulo.textContent = filme.nome;
      filmeDiv.appendChild(titulo);

      // Descri√ß√£o e pre√ßo
      const descricao = document.createElement("p");
      descricao.textContent = `${filme.descricao} üéüÔ∏è R$${filme.preco},00`;
      filmeDiv.appendChild(descricao);

      listaFilmesDiv.appendChild(filmeDiv);
    });
  }
}

// Fun√ß√£o para verificar se o usu√°rio est√° logado
function verificarLogin() {
  const usuarioLogado = localStorage.getItem("usuarioLogado");
  return usuarioLogado ? JSON.parse(usuarioLogado) : null;
}

// Fun√ß√£o para verificar se o usu√°rio √© administrador
function verificarAdmin() {
  const usuario = verificarLogin();
  return usuario && usuario.isAdmin;
}

// Fun√ß√£o para atualizar a interface com base no status de login
function atualizarInterfaceLogin() {
  const usuario = verificarLogin();
  const userInfoHeader = document.getElementById("userInfoHeader");

  if (userInfoHeader) {
    userInfoHeader.innerHTML = ""; // Limpa o conte√∫do existente
    if (usuario) {
      // Se estiver logado, mostra informa√ß√µes do usu√°rio e link de logout
      const userNameSpan = document.createElement("span");
      userNameSpan.textContent = `Ol√°, ${usuario.nome}`;
      userInfoHeader.appendChild(userNameSpan);

      const logoutLink = document.createElement("a");
      logoutLink.href = "#";
      logoutLink.textContent = "Sair";
      logoutLink.onclick = fazerLogout;
      userInfoHeader.appendChild(logoutLink);

      // Se for admin, adiciona link para o painel de administra√ß√£o
      if (usuario.isAdmin) {
        const adminLink = document.createElement("a");
        adminLink.href = "admin.html"; // P√°gina do painel de administra√ß√£o
        adminLink.textContent = "Painel Admin";
        adminLink.style.marginLeft = "10px";
        userInfoHeader.appendChild(adminLink);
      }

    } else {
      // Se n√£o estiver logado, mostra o √≠cone de login
      const loginIconLink = document.createElement("a");
      loginIconLink.href = "login.html";
      loginIconLink.className = "login-icon";
      loginIconLink.textContent = "üë§";
      userInfoHeader.appendChild(loginIconLink);
    }
  }
}

// Fun√ß√£o para fazer login
function fazerLogin(event) {
  event.preventDefault();

  const email = document.getElementById("email").value;
  const senha = document.getElementById("senha").value;

  // Busca usu√°rios cadastrados
  let usuarios = JSON.parse(localStorage.getItem("usuarios") || "[]");

  // Adiciona o admin user se n√£o existir
  if (!usuarios.some(u => u.email === adminUser.email)) {
    usuarios.push(adminUser);
    localStorage.setItem("usuarios", JSON.stringify(usuarios));
  }

  const usuario = usuarios.find(u => u.email === email && u.senha === senha);

  if (usuario) {
    // Login bem-sucedido
    localStorage.setItem("usuarioLogado", JSON.stringify(usuario));

    // Registra o login no hist√≥rico
    registrarHistoricoLogin(usuario);

    // Redireciona para a p√°gina anterior ou para a p√°gina inicial
    const paginaAnterior = localStorage.getItem("paginaAnterior") || "index.html";
    window.location.href = paginaAnterior;
  } else {
    // Login falhou
    alert("E-mail ou senha incorretos. Tente novamente.");
  }
}

// Fun√ß√£o para registrar hist√≥rico de login
function registrarHistoricoLogin(usuario) {
  const historico = JSON.parse(localStorage.getItem("historicoLogins") || "[]");
  const login = {
    usuario: usuario.email,
    nome: usuario.nome,
    data: new Date().toISOString(),
    isAdmin: usuario.isAdmin
  };
  historico.push(login);
  localStorage.setItem("historicoLogins", JSON.stringify(historico));
}

// Fun√ß√£o para fazer cadastro
function fazerCadastro(event) {
  event.preventDefault();

  const nome = document.getElementById("nome").value;
  const email = document.getElementById("email").value;
  const senha = document.getElementById("senha").value;
  const confirmarSenha = document.getElementById("confirmarSenha").value;

  // Valida√ß√µes
  if (senha !== confirmarSenha) {
    alert("As senhas n√£o coincidem. Tente novamente.");
    return;
  }

  // Busca usu√°rios cadastrados
  let usuarios = JSON.parse(localStorage.getItem("usuarios") || "[]");

  // Verifica se o e-mail j√° est√° cadastrado
  if (usuarios.some(u => u.email === email)) {
    alert("Este e-mail j√° est√° cadastrado. Tente fazer login.");
    return;
  }

  // Adiciona o novo usu√°rio
  const novoUsuario = {
    nome,
    email,
    senha,
    isAdmin: false,
    dataCadastro: new Date().toISOString()
  };
  usuarios.push(novoUsuario);
  localStorage.setItem("usuarios", JSON.stringify(usuarios));

  // Faz login autom√°tico
  localStorage.setItem("usuarioLogado", JSON.stringify(novoUsuario));

  // Registra o cadastro no hist√≥rico
  registrarHistoricoLogin(novoUsuario);

  // Redireciona para a p√°gina anterior ou para a p√°gina inicial
  const paginaAnterior = localStorage.getItem("paginaAnterior") || "index.html";
  window.location.href = paginaAnterior;
}

// Fun√ß√£o para fazer logout
function fazerLogout() {
  localStorage.removeItem("usuarioLogado");
  window.location.href = "index.html";
}

// Fun√ß√£o para selecionar um filme
function selecionarFilme(filme) {
  localStorage.setItem("filme", filme);  // Salva o filme no localStorage
  localStorage.setItem("paginaAnterior", "index.html");  // Salva a p√°gina atual

  // Verifica se o usu√°rio est√° logado antes de prosseguir
  const usuario = verificarLogin();
  if (!usuario) {
    // Se n√£o estiver logado, redireciona para a p√°gina de login
    window.location.href = "login.html";
  } else {
    // Se estiver logado, prossegue para a p√°gina de sess√£o
    window.location.href = "sessao.html";
  }
}

// Fun√ß√£o para alterar a quantidade de ingressos
function alterarQuantidade(valor) {
  quantidade += valor;  // Incrementa ou decrementa a quantidade

  // Valida√ß√µes
  if (quantidade < 1) quantidade = 1;  // M√≠nimo de 1 ingresso
  if (quantidade > 8) {  // M√°ximo de 8 ingressos
    quantidade = 8;
    alert("Voc√™ s√≥ pode comprar no m√°ximo 8 ingressos por vez.");
  }

  // Atualiza a exibi√ß√£o
  const qtdSpan = document.getElementById("qtdIngressos");
  const subtotalSpan = document.getElementById("subtotal");
  const filmeNome = localStorage.getItem("filme");
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");
  const filmeSelecionado = filmes.find(f => f.nome === filmeNome);

  if (qtdSpan && subtotalSpan && filmeSelecionado) {
    qtdSpan.textContent = quantidade;  // Atualiza a quantidade
    subtotalSpan.textContent = quantidade * filmeSelecionado.preco;  // Atualiza o subtotal
  }

  // Salva no localStorage com base no pre√ßo real do filme
if (filmeSelecionado) {
  localStorage.setItem("quantidade", quantidade);
  localStorage.setItem("subtotal", quantidade * filmeSelecionado.preco);
}


}

// Fun√ß√£o para confirmar a sess√£o
function confirmarSessao() {
  const quantidade = parseInt(localStorage.getItem("quantidade"));
  // Obt√©m assentos selecionados
  const assentosSelecionados = Array.from(document.querySelectorAll(".assento.selecionado")).map(el => el.dataset.id);
  const horarioSelecionado = localStorage.getItem("horario");

  // Valida√ß√µes
  if (assentosSelecionados.length !== quantidade) {
    alert("Escolha exatamente " + quantidade + " assento(s).");
    return;
  }

  if (!horarioSelecionado) {
    alert("Selecione um hor√°rio.");
    return;
  }

  // Salva no localStorage e redireciona
  localStorage.setItem("assentos", JSON.stringify(assentosSelecionados));
  localStorage.setItem("quantidade", quantidade);
  window.location.href = "confirmacao.html";
}

// Fun√ß√£o para processar o pagamento
function processarPagamento(event) {
  event.preventDefault();  // Previne o comportamento padr√£o do formul√°rio

  // Verifica se o usu√°rio est√° logado
  const usuario = verificarLogin();
  if (!usuario) {
    alert("Voc√™ precisa estar logado para finalizar a compra.");
    localStorage.setItem("paginaAnterior", "confirmacao.html");
    window.location.href = "login.html";
    return;
  }

  // Obt√©m os dados do formul√°rio e do localStorage
  const nome = document.getElementById("nome").value;
  const filme = localStorage.getItem("filme");
  const horario = localStorage.getItem("horario");
  const assentos = JSON.parse(localStorage.getItem("assentos"));
  const quantidade = localStorage.getItem("quantidade");
  const subtotal = localStorage.getItem("subtotal");

  // Registra a compra no hist√≥rico
  registrarHistoricoCompra(usuario, filme, horario, assentos, quantidade, subtotal);

  const filmeNome = localStorage.getItem("filme");
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");
  const filmeSelecionado = filmes.find(f => f.nome === filmeNome);

  // Gera o conte√∫do da nota fiscal
  const conteudoNota = `
üéüÔ∏è NOTA FISCAL - CINEMA ARTEMIS üéüÔ∏è

Nome: ${nome}
E-mail: ${usuario.email}
Filme: ${filme}
Hor√°rio: ${horario}
Assentos: ${assentos.join(", ")}
Quantidade de ingressos: ${quantidade}
Valor unit√°rio: R$${filmeSelecionado.preco},00
Valor total: R$${parseInt(subtotal)},00

Obrigado pela prefer√™ncia!
`;

  // Cria e faz download da nota fiscal
  const blob = new Blob([conteudoNota], { type: "text/plain;charset=utf-8" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "nota-fiscal.txt";
  link.click();

  // Mostra mensagem de sucesso
  alert("Pagamento aprovado! üéâ Sua nota fiscal foi baixada.");
}

// Fun√ß√£o para registrar hist√≥rico de compra
function registrarHistoricoCompra(usuario, filme, horario, assentos, quantidade, subtotal) {
  const historico = JSON.parse(localStorage.getItem("historicoCompras") || "[]");
  const compra = {
    usuario: usuario.email,
    nome: usuario.nome,
    filme,
    horario,
    assentos,
    quantidade,
    subtotal,
    data: new Date().toISOString()
  };
  historico.push(compra);
  localStorage.setItem("historicoCompras", JSON.stringify(historico));
}

// Fun√ß√£o para adicionar um novo filme (admin)
function adicionarFilme(event) {
  event.preventDefault();

  // Verifica se √© admin
  if (!verificarAdmin()) {
    alert("Apenas administradores podem adicionar filmes.");
    return;
  }

  // Obt√©m os dados do formul√°rio
  const nome = document.getElementById("nomeFilme").value;
  const descricao = document.getElementById("descricaoFilme").value;
  const preco = parseInt(document.getElementById("precoFilme").value);
  const capa = document.getElementById("capaFilme").value;

  // Busca filmes cadastrados
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");

  // Gera um ID √∫nico para o novo filme
  const id = filmes.length > 0 ? Math.max(...filmes.map(f => f.id)) + 1 : 1;

  // Adiciona o novo filme
  const novoFilme = { id, nome, descricao, preco, capa };
  filmes.push(novoFilme);
  localStorage.setItem("filmes", JSON.stringify(filmes));

  // Limpa o formul√°rio
  document.getElementById("formAdicionarFilme").reset();

  // Atualiza a lista de filmes
  carregarFilmesAdmin();

  // Mostra mensagem de sucesso
  alert(`Filme "${nome}" adicionado com sucesso!`);
}

// Fun√ß√£o para remover um filme (admin)
function removerFilme(id) {
  // Verifica se √© admin
  if (!verificarAdmin()) {
    alert("Apenas administradores podem remover filmes.");
    return;
  }

  // Confirma a remo√ß√£o
  if (!confirm("Tem certeza que deseja remover este filme?")) {
    return;
  }

  // Busca filmes cadastrados
  let filmes = JSON.parse(localStorage.getItem("filmes") || "[]");

  // Remove o filme
  filmes = filmes.filter(f => f.id !== id);
  localStorage.setItem("filmes", JSON.stringify(filmes));

  // Atualiza a lista de filmes
  carregarFilmesAdmin();

  // Mostra mensagem de sucesso
  alert("Filme removido com sucesso!");
}

// Fun√ß√£o para promover um usu√°rio a administrador
function promoverUsuario(email) {
  // Verifica se √© admin
  if (!verificarAdmin()) {
    alert("Apenas administradores podem promover usu√°rios.");
    return;
  }

  // Confirma a promo√ß√£o
  if (!confirm(`Tem certeza que deseja promover o usu√°rio ${email} a administrador?`)) {
    return;
  }

  // Busca usu√°rios cadastrados
  let usuarios = JSON.parse(localStorage.getItem("usuarios") || "[]");

  // Encontra o usu√°rio
  const index = usuarios.findIndex(u => u.email === email);
  if (index === -1) {
    alert("Usu√°rio n√£o encontrado.");
    return;
  }

  // Promove o usu√°rio
  usuarios[index].isAdmin = true;
  localStorage.setItem("usuarios", JSON.stringify(usuarios));

  // Atualiza a lista de usu√°rios
  carregarUsuariosAdmin();

  // Mostra mensagem de sucesso
  alert(`Usu√°rio ${email} promovido a administrador com sucesso!`);
}

// Fun√ß√£o para rebaixar um usu√°rio de administrador
function rebaixarUsuario(email) {
  // Verifica se √© admin
  if (!verificarAdmin()) {
    alert("Apenas administradores podem rebaixar usu√°rios.");
    return;
  }

  // Confirma o rebaixamento
  if (!confirm(`Tem certeza que deseja remover os privil√©gios de administrador do usu√°rio ${email}?`)) {
    return;
  }

  // Busca usu√°rios cadastrados
  let usuarios = JSON.parse(localStorage.getItem("usuarios") || "[]");

  // Encontra o usu√°rio
  const index = usuarios.findIndex(u => u.email === email);
  if (index === -1) {
    alert("Usu√°rio n√£o encontrado.");
    return;
  }

  // Rebaixa o usu√°rio
  usuarios[index].isAdmin = false;
  localStorage.setItem("usuarios", JSON.stringify(usuarios));

  // Atualiza a lista de usu√°rios
  carregarUsuariosAdmin();

  // Mostra mensagem de sucesso
  alert(`Privil√©gios de administrador removidos do usu√°rio ${email} com sucesso!`);
}

// Fun√ß√£o para exportar usu√°rios para CSV
function exportarUsuariosCSV() {
  const usuarios = JSON.parse(localStorage.getItem("usuarios") || "[]");
  if (usuarios.length === 0) {
    alert("Nenhum usu√°rio cadastrado para exportar.");
    return;
  }

  let csvContent = "Nome,Email,Admin,Data de Cadastro\n"; // Cabe√ßalho do CSV
  usuarios.forEach(user => {
    const dataCadastro = user.dataCadastro ? new Date(user.dataCadastro).toLocaleDateString('pt-BR') : 'N/A';
    csvContent += `${user.nome},${user.email},${user.isAdmin ? "Sim" : "N√£o"},${dataCadastro}\n`;
  });

  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "usuarios.csv";
  link.click();
  alert("Usu√°rios exportados para usuarios.csv!");
}

// Fun√ß√£o para exportar hist√≥rico de logins para CSV
function exportarHistoricoLoginsCSV() {
  const historico = JSON.parse(localStorage.getItem("historicoLogins") || "[]");
  if (historico.length === 0) {
    alert("Nenhum hist√≥rico de login para exportar.");
    return;
  }

  let csvContent = "Nome,Email,Data,Admin\n"; // Cabe√ßalho do CSV
  historico.forEach(login => {
    const data = new Date(login.data).toLocaleString('pt-BR');
    csvContent += `${login.nome},${login.usuario},${data},${login.isAdmin ? "Sim" : "N√£o"}\n`;
  });

  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "historico_logins.csv";
  link.click();
  alert("Hist√≥rico de logins exportado para historico_logins.csv!");
}

// Fun√ß√£o para exportar hist√≥rico de compras para CSV
function exportarHistoricoComprasCSV() {
  const historico = JSON.parse(localStorage.getItem("historicoCompras") || "[]");
  if (historico.length === 0) {
    alert("Nenhum hist√≥rico de compras para exportar.");
    return;
  }

  let csvContent = "Nome,Email,Filme,Hor√°rio,Assentos,Quantidade,Valor Total,Data\n"; // Cabe√ßalho do CSV
  historico.forEach(compra => {
    const data = new Date(compra.data).toLocaleString('pt-BR');
    csvContent += `${compra.nome},${compra.usuario},${compra.filme},${compra.horario},"${compra.assentos.join(', ')}",${compra.quantidade},R$${compra.subtotal},00,${data}\n`;
  });

  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "historico_compras.csv";
  link.click();
  alert("Hist√≥rico de compras exportado para historico_compras.csv!");
}

// Fun√ß√£o para carregar filmes na p√°gina de administra√ß√£o
function carregarFilmesAdmin() {
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");
  const listaFilmesDiv = document.getElementById("listaFilmes");

  if (listaFilmesDiv) {
    listaFilmesDiv.innerHTML = ""; // Limpa a lista

    if (filmes.length === 0) {
      listaFilmesDiv.innerHTML = "<p>Nenhum filme cadastrado.</p>";
      return;
    }

    // Cria lista de filmes
    filmes.forEach(filme => {
      const filmeDiv = document.createElement("div");
      filmeDiv.className = "filme-item";

      // Imagem do filme
      const img = document.createElement("img");
      img.src = filme.capa;
      img.alt = filme.nome;
      filmeDiv.appendChild(img);

      // Informa√ß√µes do filme
      const infoDiv = document.createElement("div");
      infoDiv.className = "filme-info";

      const titulo = document.createElement("h4");
      titulo.textContent = filme.nome;
      infoDiv.appendChild(titulo);

      const descricao = document.createElement("p");
      descricao.textContent = filme.descricao;
      infoDiv.appendChild(descricao);

      const preco = document.createElement("p");
      preco.textContent = `Pre√ßo: R$${filme.preco},00`;
      infoDiv.appendChild(preco);

      filmeDiv.appendChild(infoDiv);

      // A√ß√µes do filme
      const acoesDiv = document.createElement("div");
      acoesDiv.className = "filme-actions";

      const btnRemover = document.createElement("button");
      btnRemover.textContent = "Remover";
      btnRemover.className = "btn-danger";
      btnRemover.onclick = () => removerFilme(filme.id);
      acoesDiv.appendChild(btnRemover);

      const btnEditar = document.createElement("button");
      btnEditar.textContent = "Editar";
      btnEditar.className = "btn-edit";
      btnEditar.onclick = () => editarFilme(filme);
      acoesDiv.appendChild(btnEditar);

      filmeDiv.appendChild(acoesDiv);

      listaFilmesDiv.appendChild(filmeDiv);
    });
  }

  // Atualiza estat√≠sticas
  const totalFilmesSpan = document.getElementById("totalFilmes");
  if (totalFilmesSpan) {
    totalFilmesSpan.textContent = filmes.length;
  }
}

// Fun√ß√£o para carregar usu√°rios na p√°gina de administra√ß√£o
function carregarUsuariosAdmin() {
  const usuarios = JSON.parse(localStorage.getItem("usuarios") || "[]");
  const listaUsuariosDiv = document.getElementById("listaUsuarios");

  if (listaUsuariosDiv) {
    listaUsuariosDiv.innerHTML = ""; // Limpa a lista

    if (usuarios.length === 0) {
      listaUsuariosDiv.innerHTML = "<p>Nenhum usu√°rio cadastrado.</p>";
      return;
    }

    // Adiciona bot√µes de exporta√ß√£o
    const botoesDiv = document.createElement("div");
    botoesDiv.className = "admin-buttons";

    const btnExportarLogins = document.createElement("button");
    btnExportarLogins.textContent = "Exportar Hist√≥rico de Logins";
    btnExportarLogins.onclick = exportarHistoricoLoginsCSV;
    botoesDiv.appendChild(btnExportarLogins);

    const btnExportarCompras = document.createElement("button");
    btnExportarCompras.textContent = "Exportar Hist√≥rico de Compras";
    btnExportarCompras.onclick = exportarHistoricoComprasCSV;
    botoesDiv.appendChild(btnExportarCompras);

    listaUsuariosDiv.appendChild(botoesDiv);

    // Cria tabela de usu√°rios
    const table = document.createElement("table");
    table.className = "admin-table";

    // Cabe√ßalho da tabela
    const thead = document.createElement("thead");
    const headerRow = document.createElement("tr");
    ["Nome", "Email", "Admin", "Data de Cadastro", "A√ß√µes"].forEach(text => {
      const th = document.createElement("th");
      th.textContent = text;
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);

    // Corpo da tabela
    const tbody = document.createElement("tbody");
    usuarios.forEach(user => {
      const tr = document.createElement("tr");

      // Coluna Nome
      const tdNome = document.createElement("td");
      tdNome.textContent = user.nome;
      tr.appendChild(tdNome);

      // Coluna Email
      const tdEmail = document.createElement("td");
      tdEmail.textContent = user.email;
      tr.appendChild(tdEmail);

      // Coluna Admin
      const tdAdmin = document.createElement("td");
      tdAdmin.textContent = user.isAdmin ? "Sim" : "N√£o";
      tr.appendChild(tdAdmin);

      // Coluna Data de Cadastro
      const tdData = document.createElement("td");
      tdData.textContent = user.dataCadastro ? new Date(user.dataCadastro).toLocaleDateString('pt-BR') : 'N/A';
      tr.appendChild(tdData);

      // Coluna A√ß√µes
      const tdAcoes = document.createElement("td");
      tdAcoes.className = "user-actions";

      // Se n√£o for admin, mostra bot√£o para promover
      if (!user.isAdmin) {
        const btnPromover = document.createElement("button");
        btnPromover.textContent = "Promover a Admin";
        btnPromover.className = "btn-promote";
        btnPromover.onclick = () => promoverUsuario(user.email);
        tdAcoes.appendChild(btnPromover);
      } else if (user.email !== adminUser.email) { // Se for admin (mas n√£o o admin principal), mostra bot√£o para rebaixar
        const btnRebaixar = document.createElement("button");
        btnRebaixar.textContent = "Remover Admin";
        btnRebaixar.className = "btn-demote";
        btnRebaixar.onclick = () => rebaixarUsuario(user.email);
        tdAcoes.appendChild(btnRebaixar);
      }

      tr.appendChild(tdAcoes);

      tbody.appendChild(tr);
    });
    table.appendChild(tbody);

    listaUsuariosDiv.appendChild(table);
  }

  // Atualiza estat√≠sticas
  const totalUsuariosSpan = document.getElementById("totalUsuarios");
  if (totalUsuariosSpan) {
    totalUsuariosSpan.textContent = usuarios.length;
  }

  // Carrega tamb√©m os filmes
  carregarFilmesAdmin();
}

// Fun√ß√£o executada quando a p√°gina carrega
window.onload = function () {
  // Inicializa filmes no localStorage
  inicializarFilmes();

  // Verifica e atualiza a interface de login
  atualizarInterfaceLogin();

  // Se estiver na p√°gina inicial, carrega os filmes
  if (window.location.href.includes("index.html") || window.location.pathname === "/") {
    carregarFilmesHome();
  }

  // Atualiza o filme escolhido
  const filme = localStorage.getItem("filme");
  const filmeSpan = document.getElementById("filmeEscolhido");
  if (filmeSpan && filme) filmeSpan.textContent = "Filme escolhido: " + filme;

  // Carrega detalhes do filme na p√°gina de sess√£o
  if (window.location.href.includes("sessao.html")) {
    carregarDetalhesFilmeSessao();
  }

  // Atualiza o resumo na p√°gina de confirma√ß√£o
  const resumo = document.getElementById("resumo");
  if (resumo && filme) {
    const horario = localStorage.getItem("horario");
    const assentos = JSON.parse(localStorage.getItem("assentos") || "[]");
    resumo.textContent = `Filme: ${filme}, Hor√°rio: ${horario}, Assentos: ${assentos.join(", ")}`;
  }

  // Atualiza o subtotal na p√°gina de confirma√ß√£o
  const subtotal = localStorage.getItem("subtotal");
  const subtotalConfirm = document.getElementById("subtotalConfirmacao");
  if (subtotalConfirm && subtotal) {
    subtotalConfirm.textContent = subtotal;
  }

  // Atualiza a quantidade ao entrar na p√°gina
  const qtdSalva = parseInt(localStorage.getItem("quantidade")) || 1;
  quantidade = qtdSalva;
  alterarQuantidade(0);  // For√ßa a atualiza√ß√£o

  // Configura eventos dos bot√µes de hor√°rio
  const botoesHorario = document.querySelectorAll(".horarios button");
  botoesHorario.forEach(btn => {
    btn.addEventListener("click", () => {
      // Remove a sele√ß√£o de todos os bot√µes
      botoesHorario.forEach(b => b.classList.remove("selecionado"));
      // Adiciona sele√ß√£o ao bot√£o clicado
      btn.classList.add("selecionado");
      // Salva o hor√°rio no localStorage
      localStorage.setItem("horario", btn.dataset.hora);
    });
  });

  // Configura eventos dos assentos
  const assentos = document.querySelectorAll(".assento");
  assentos.forEach(el => {
    el.addEventListener("click", () => {
      const selecionados = document.querySelectorAll(".assento.selecionado").length;
      if (el.classList.contains("selecionado")) {
        // Remove a sele√ß√£o se j√° estiver selecionado
        el.classList.remove("selecionado");
      } else if (selecionados < quantidade) {
        // Adiciona sele√ß√£o se ainda n√£o atingiu o limite
        el.classList.add("selecionado");
      } else {
        // Avisa sobre o limite de assentos
        alert("Voc√™ s√≥ pode escolher " + quantidade + " assento(s).");
      }
    });
  });

  // Verifica se est√° na p√°gina de confirma√ß√£o e se o usu√°rio est√° logado
  if (window.location.href.includes("confirmacao.html")) {
    const usuario = verificarLogin();
    if (!usuario) {
      alert("Voc√™ precisa estar logado para finalizar a compra.");
      localStorage.setItem("paginaAnterior", "confirmacao.html");
      window.location.href = "login.html";
    }
  }

  // Se estiver na p√°gina de administra√ß√£o, verifica se √© admin
  if (window.location.href.includes("admin.html")) {
    if (!verificarAdmin()) {
      alert("Acesso negado. Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.");
      window.location.href = "index.html";
      return;
    }
    // Carrega a lista de usu√°rios e filmes na p√°gina de administra√ß√£o
    carregarUsuariosAdmin();
  }
};



// Fun√ß√£o para carregar detalhes do filme na p√°gina de sess√£o
function carregarDetalhesFilmeSessao() {
  const filmeNome = localStorage.getItem("filme");
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");
  const filmeSelecionado = filmes.find(f => f.nome === filmeNome);
  const detalhesFilmeDiv = document.getElementById("detalhesFilmeSessao");

  if (detalhesFilmeDiv && filmeSelecionado) {
    detalhesFilmeDiv.innerHTML = ""; // Limpa o conte√∫do existente

    const filmeDiv = document.createElement("div");
    filmeDiv.className = "filme-detalhes-sessao"; // Nova classe para estiliza√ß√£o

    const img = document.createElement("img");
    img.src = filmeSelecionado.capa;
    img.alt = filmeSelecionado.nome;
    filmeDiv.appendChild(img);

    const titulo = document.createElement("h3");
    titulo.textContent = filmeSelecionado.nome;
    filmeDiv.appendChild(titulo);

    const descricao = document.createElement("p");
    descricao.textContent = `${filmeSelecionado.descricao} üéüÔ∏è R$${filmeSelecionado.preco},00`;
    filmeDiv.appendChild(descricao);

    detalhesFilmeDiv.appendChild(filmeDiv);
  }
}




// Fun√ß√£o para voltar para a p√°gina anterior
function goBack() {
  window.history.back();
}
function editarFilme(filme) {
  if (!verificarAdmin()) {
    alert("Apenas administradores podem editar filmes.");
    return;
  }

  // Adiciona a mensagem de confirma√ß√£o
  if (!confirm(`Tem certeza que deseja editar este filme?`)) {
    return;
  }

  // Preenche o formul√°rio com os dados do filme
  document.getElementById("nomeFilme").value = filme.nome;
  document.getElementById("descricaoFilme").value = filme.descricao;
  document.getElementById("precoFilme").value = filme.preco;
  document.getElementById("capaFilme").value = filme.capa;

  // Remove o filme antigo (isso acontecer√° quando o admin submeter o formul√°rio)
  // N√£o removemos imediatamente para permitir que o admin cancele a edi√ß√£o

  // Rola at√© o formul√°rio para facilitar a edi√ß√£o
  document.getElementById("formAdicionarFilme").scrollIntoView();
}

function adicionarFilme(event) {
  event.preventDefault();

  // Verifica se √© admin
  if (!verificarAdmin()) {
    alert("Apenas administradores podem adicionar filmes.");
    return;
  }

  // Obt√©m os dados do formul√°rio
  const nome = document.getElementById("nomeFilme").value;
  const descricao = document.getElementById("descricaoFilme").value;
  const preco = parseInt(document.getElementById("precoFilme").value);
  const capa = document.getElementById("capaFilme").value;

  // Busca filmes cadastrados
  const filmes = JSON.parse(localStorage.getItem("filmes") || "[]");

  // Verifica se √© uma edi√ß√£o (procura pelo nome no array)
  const filmeExistenteIndex = filmes.findIndex(f => f.nome === nome);

  if (filmeExistenteIndex !== -1) {
    // Se encontrou, remove o filme antigo
    filmes.splice(filmeExistenteIndex, 1);
  }

  // Gera um ID √∫nico para o novo filme
  const id = filmes.length > 0 ? Math.max(...filmes.map(f => f.id)) + 1 : 1;

  // Adiciona o novo filme
  const novoFilme = { id, nome, descricao, preco, capa };
  filmes.push(novoFilme);
  localStorage.setItem("filmes", JSON.stringify(filmes));

  // Limpa o formul√°rio
  document.getElementById("formAdicionarFilme").reset();

  // Atualiza a lista de filmes
  carregarFilmesAdmin();

  // Mostra mensagem de sucesso
  alert(`Filme "${nome}" ${filmeExistenteIndex !== -1 ? 'editado' : 'adicionado'} com sucesso!`);
}